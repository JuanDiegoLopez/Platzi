{"version":3,"sources":["agent-test.js"],"names":["config","logging","MetricStub","belongsTo","spy","AgentStub","db","sandbox","beforeEach","create","hasMany","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith"],"mappings":";;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,SAAS;AACXC,WAAS,YAAY,CAAE;AADZ,CAAb;;AAIA,IAAIC,aAAa;AACfC,aAAW,gBAAMC,GAAN;AADI,CAAjB;;AAIA,IAAIC,YAAY,IAAhB;AACA,IAAIC,KAAK,IAAT;AACA,IAAIC,UAAU,IAAd;;AAEA,cAAKC,UAAL,CAAgB,YAAY;AAC1BD,YAAU,gBAAMA,OAAN,CAAcE,MAAd,EAAV;AACAJ,cAAY;AACVK,aAASH,QAAQH,GAAR;AADC,GAAZ;;AAIA,QAAMO,gBAAgB,0BAAW,KAAX,EAAkB;AACtC,sBAAkB,MAAMN,SADc;AAEtC,uBAAmB,MAAMH;AAFa,GAAlB,CAAtB;;AAKAI,OAAK,MAAMK,cAAcX,MAAd,CAAX;AACD,CAZD;;AAcA,cAAKY,SAAL,CAAe,MAAM;AACnBL,aAAW,gBAAMA,OAAN,CAAcM,OAAd,EAAX;AACD,CAFD;;AAIA,mBAAK,OAAL,EAAcC,KAAK;AAAA;;AACjBA,IAAEC,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmB,4BAAnB;AACD,CAFD;;AAIA,cAAKC,MAAL,CAAY,OAAZ,EAAqBH,KAAK;AAAA;AAAA;AAAA;AAAA;;AACxBA,IAAEI,IAAF,yBAAO,gEAAUR,OAAV,wBAAkBS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiC,iCAAjC;AACAL,IAAEI,IAAF,yBAAO,uEAAUR,OAAV,+BAAkBU,UAAlB,aAA6BlB,UAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAiD,oCAAjD;AACAY,IAAEI,IAAF,yBAAO,iEAAWf,SAAX,wBAAqBgB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAoC,oCAApC;AACAL,IAAEI,IAAF,yBAAO,wEAAWf,SAAX,+BAAqBiB,UAArB,aAAgCf,SAAhC,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAmD,mCAAnD;AACD,CALD","file":"agent-test.js","sourcesContent":["import test from 'ava'\r\nimport proxyquire from 'proxyquire'\r\nimport sinon from 'sinon'\r\n\r\nlet config = {\r\n  logging: function () {}\r\n}\r\n\r\nlet MetricStub = {\r\n  belongsTo: sinon.spy()\r\n}\r\n\r\nlet AgentStub = null\r\nlet db = null\r\nlet sandbox = null\r\n\r\ntest.beforeEach(async () => {\r\n  sandbox = sinon.sandbox.create()\r\n  AgentStub = {\r\n    hasMany: sandbox.spy()\r\n  }\r\n\r\n  const setupDatabase = proxyquire('../', {\r\n    './models/agent': () => AgentStub,\r\n    './models/metric': () => MetricStub\r\n  })\r\n\r\n  db = await setupDatabase(config)\r\n})\r\n\r\ntest.afterEach(() => {\r\n  sandbox && sinon.sandbox.restore() \r\n})\r\n\r\ntest('Agent', t => {\r\n  t.truthy(db.Agent, 'Agent service should exist')\r\n})\r\n\r\ntest.serial('Setup', t => {\r\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\r\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the MetricModel')\r\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\r\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentModel')\r\n})"]}